/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  const { callbackify } = require('util');
  const app = express();
  
  app.use(bodyParser.json());


  // app.get('/todos', (req, res)=>{
  //   getAllTodos((todos)=>{
  //     res.status(200).json(todos);
  //   });
  // });
  
  // function getAllTodos(calllback){
  //   fs.readFile('todo.json', 'utf-8', (err, data)=>{
  //     if(err){
  //       callback([]);
  //     }else{
  //       const todos = JSON.parse(data);
  //       callback(todos);
  //     }
  //   });
  // }


  app.get('/todos', (req, res)=>{
    getAllTodos().then((todos)=>{
      res.status(200).json(todos);
    })
  });

  function getAllTodos(){
    return new Promise((resolve)=>{
      fs.readFile('todos.json', 'utf-8', (err, data)=>{
        if(err){
          reject(err);
        }else{
          const todos = JSON.parse(data);
          resolve(todos);
        }
      });
    });
  }


  app.get('/todos/:id', (req, res)=>{
    const id = req.params.id;
    getTodoById(id).then((todo)=>{
      if(todo){
        res.status(200).json(todo);
      }else{
        res.status(404).send('Todo not found');
      }
    })
  });

  function getTodoById(id){
    return new Promise((resolve)=>{
      fs.readFile('todos.json', 'utf-8', (err, data)=>{
        if(err){
          reject(err);
        }else{
          const todos = JSON.parse(data);
          const todo = todos.find((t)=> t.id === parseInt(id));
          resolve(todo);
        }
      });
    });
  }



  app.post('/todos', async (req, res)=>{
    try{ 
      const newTodo = req.body;
      newTodo.id = uuidv4();

      const todos = await getAllTodos1();
      todos.push(newTodo);

      await saveAllTodos(todos);
      res.status(201).json({ id: newTodo.id });

    }catch(error){
      console.error(error);
      res.status(500).send('Internal Server Error');
    }
  });

  async function getAllTodos1(){
    try{
      const data = await fs.readFile('todos.json', 'utf-8');
      const todos = JSON.parse(data);

      return todos;

    }catch(error){
      return [];
    }
  }

  async function saveAllTodos(todos){
    try{
      await fs.writeFile('todos.json', JSON.stringify(todos), 'utf-8');
    }catch(error){
      throw(error);
    }
  }

  app.put('/todos/:id', (req, res) => {
    const id = req.params.id;
  
    getTodoById(id)
      .then((todo) => {
        if (todo) {
          // Todo found, update it with the request body
          const updatedTodo = req.body;
          todo.title = updatedTodo.title || todo.title;
          todo.completed = updatedTodo.completed !== undefined ? updatedTodo.completed : todo.completed;
  
          // Now save the updated todos array
          saveAllTodos(todos)
            .then(() => {
              res.status(200).send('Todo updated successfully');
            })
            .catch((error) => {
              console.error(error);
              res.status(500).send('Internal Server Error');
            });
        } else {
          // Todo not found
          res.status(404).send('Todo not found');
        }
      })
      .catch((error) => {
        console.error(error);
        res.status(500).send('Internal Server Error');
      });
  });
  app.delete('/todos/:id', (req, res) => {
    const id = req.params.id;
  
    getTodoById(id)
      .then((todo) => {
        if (todo) {
          // Todo found, remove it from the array
          const updatedTodos = todos.filter((t) => t.id !== parseInt(id));
  
          // Now save the updated todos array
          saveAllTodos(updatedTodos)
            .then(() => {
              res.status(200).send('Todo deleted successfully');
            })
            .catch((error) => {
              console.error(error);
              res.status(500).send('Internal Server Error');
            });
        } else {
          // Todo not found
          res.status(404).send('Todo not found');
        }
      })
      .catch((error) => {
        console.error(error);
        res.status(500).send('Internal Server Error');
      });
  });
  

  module.exports = app;